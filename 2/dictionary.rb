Метод rand генерирует случайное число в заданном диапазоне. puts rand(100)

Метод chomp возвращает ту же строку, но без завершающего
символа новой строки. 

Ruby — интерпретируемый язык. Код Ruby
не нужно компилировать перед выполнением.

Переменные не нужно объявлять перед присваиванием им значений. Также не нужно
указывать тип переменной.

Ruby рассматривает все символы от # до конца строки как комментарий и игнорирует их.

Текст, заключенный в кавычки, рассматривается как строка, то есть последовательность
символов.

Если в строку Ruby входит конструкция
#{...}, то выражение в фигурных скобках
интерполируется (подставляется) в строку.

При вызове методов могут передаваться
аргументы, разделенные запятыми.

Заключать список аргументов в круглые скобки
не обязательно. Если аргументы отсутствуют,
не ставьте пустые круглые скобки.

Используйте методы inspect и p для просмотра отладочной информации по объектам
Ruby.

Для включения специальных символов в строки, заключенные в двойные кавычки, используются служебные последовательности (такие,
как \n и \t).

Интерактивный интерпретатор Ruby (или irb)
позволяет быстро проверить результаты выражений Ruby.

Вызов метода to_s для (почти) любого объекта возвращает строковое представление
объекта. Вызов to_i для строки преобразует
ее в целое число.

unless — противоположность if; код
выполняется в том случае, если условие
ложно.

until — противоположность while; цикл
выполняется многократно, пока условие
не станет истинным


Имя метода чтения атрибута обычно совпадает с именем переменной
экземпляра, из которой читается значение (конечно, без символа @).
	def tail_length
		@tail_length
	end

То же относится к именам методов записи атрибута, но в конец имени
добавляется символ =.
	def tail_length=(value)
		@tail_length = value
	end


Тело метода состоит из одной или нескольких команд Ruby, выполняемых
при вызове метода.

Круглые скобки не указываются в определении метода в том (и только в том)
случае, если в методе не определяется
ни один параметр.

Если возвращаемое значение не указано явно, то метод возвращает значение
последнего вычисленного выражения.

Определения методов в определении класса рассматриваются как методы
экземпляра этого класса.

За пределами определения класса к переменным экземпляра можно
обращаться только через методы доступа.

Вызовы методов attr_writer, attr_reader и attr_accessor в определении класса
обеспечивают сокращенную запись для определения методов доступа.

Методы доступа могут использоваться
для проверки действительности данных перед их сохранением в переменных экземпляра.

Метод raise предназначен для вывода сообщений об ошибках в программе.



Наследование позволяет нескольким субклассам наследовать
методы от одного суперкласса.

Класс, содержащий общие методы, называется суперклассом, а классы, наследующие
методы, называются субклассами.

При переопределении (overriding) одного или нескольких методов в субклассе происходит
замена унаследованных методов суперкласса методами, специализированными для субкласса.

Любой класс Ruby может использоваться в качестве суперкласса.

Чтобы определить субкласс, просто укажите
суперкласс в определении класса.

Переменные экземпляра не наследуются от суперкласса — но наследуются методы,
которые создают переменные экземпляра и обращаются к ним.

Ключевое слово super может использоваться в методах субклассов для вызова
одноименного переопределенного метода из суперкласса.

Если ключевому слову super аргументы не передаются, то Ruby берет все аргументы,
с которыми был вызван метод субкласса, и передает их методу суперкласса.

Значением выражения ключевого слова super является возвращаемое значение
вызываемого метода суперкласса.

Если при определении класса его суперкласс не задается явно, то Ruby неявно
назначает им класс Object.

Почти каждый объект Ruby содержит методы экземпляра из класса Object,
унаследованные напрямую или через другой суперкласс.

Методы to_s, methods, instance_variables и class унаследованы
от класса Object



Методы класса: методы, которые могут вызываться на
уровне класса, а не для какого-то отдельного экземпляра этого класса

Числовые литералы, содержащие точку, интерпретируются как экземпляры Float.
Без точки они интерпретируются как экземпляры Fixnum.

Если хотя бы один из операндов математической операции является экземпляром
Float, то результат тоже является экземпляром Float.

Метод format использует форматные последовательности для вставки отформатированных значений в строку.

Тип форматной последовательности определяет тип вставляемого значения: число
с плавающей точкой, целое число, строка и т. д.

Ширина форматной последовательности определяет количество символов, которые
отформатированное значение должно занимать в строке.

Значение nil представляет ничто — отсутствие значения.

Такие операторы, как +, -, * и /, реализуются в Ruby в виде методов. Когда такой
оператор встречается в коде, он преобразуется в вызов метода.

В методах экземпляров ключевое слово self ссылается на экземпляр, для которого вызывается метод.

Если при вызове метода экземпляра не указан получатель, то по умолчанию в качестве
получателя используется self.

В теле класса для определения метода класса используются конструкции def
ClassName.имя_метода и def self.имя_метода




Массивы используются для хранения коллекций объектов. Коллекция может иметь произвольный размер. В массивах могут
храниться объекты любого типа (даже другие массивы); даже
допускается хранение разнотипных объектов в массиве.

Блок представляет собой фрагмент кода, который связывается
с вызовом метода. Во время выполнения метод может выполнить блок один или несколько раз. Методы и блоки совместными
усилиями обеспечивают обработку ваших данных.

Индекс — число, используемое для выборки конкретного элемента из массива. Индексы в массиве начинаются с 0.

Индекс также может использоваться
для сохранения нового значения в конкретной ячейке массива.

Метод length возвращает количество элементов в массиве.
Блоки Ruby используются только в сочетании с вызовом метода.

Существуют два варианта синтаксиса блоков: do...end и фигурные
скобки ({}).
Чтобы указать, что последний параметр
метода является блоком, можно поставить перед ним символ &.

На практике чаще применяется ключевое слово yield. Указывать параметр
метода для передачи блока при этом не
нужно — yield найдет и выполнит
его за вас.

Блок может получать от метода один
или несколько параметров. Параметры
блоков имеют много общего с параметрами методов.

Блок может читать или изменять значения локальных переменных, находящихся в той же области видимости,
что и блок.

Массивы поддерживают метод each,
который вызывает блок для каждого
элемента в массиве.